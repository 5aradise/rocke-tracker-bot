// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscription.sql

package queries

import (
	"context"
	"database/sql"
)

const createSubscriptionByTelegramID = `-- name: CreateSubscriptionByTelegramID :execlastid
INSERT INTO subscriptions (user_id, players, mode)
VALUES (
    (SELECT id FROM users WHERE telegram_id = ?), ?, ?
)
`

type CreateSubscriptionByTelegramIDParams struct {
	TelegramID sql.NullInt64
	Players    string
	Mode       string
}

func (q Queries) CreateSubscriptionByTelegramID(ctx context.Context, arg CreateSubscriptionByTelegramIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSubscriptionByTelegramID, arg.TelegramID, arg.Players, arg.Mode)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteSubscription = `-- name: DeleteSubscription :execrows
DELETE FROM subscriptions
WHERE user_id = ( SELECT id FROM users WHERE telegram_id = ? )
AND players = ?
AND mode = ?
`

type DeleteSubscriptionParams struct {
	TelegramID sql.NullInt64
	Players    string
	Mode       string
}

func (q Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteSubscription, arg.TelegramID, arg.Players, arg.Mode)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listTelegramIDsBySubscription = `-- name: ListTelegramIDsBySubscription :many
SELECT telegram_id FROM users
JOIN subscriptions ON subscriptions.user_id = users.id
WHERE subscriptions.players = ?
AND subscriptions.mode = ?
`

type ListTelegramIDsBySubscriptionParams struct {
	Players string
	Mode    string
}

func (q Queries) ListTelegramIDsBySubscription(ctx context.Context, arg ListTelegramIDsBySubscriptionParams) ([]sql.NullInt64, error) {
	rows, err := q.db.QueryContext(ctx, listTelegramIDsBySubscription, arg.Players, arg.Mode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullInt64
	for rows.Next() {
		var telegram_id sql.NullInt64
		if err := rows.Scan(&telegram_id); err != nil {
			return nil, err
		}
		items = append(items, telegram_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
